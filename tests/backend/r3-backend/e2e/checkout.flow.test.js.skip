// End-to-end tests for the complete checkout flow
// Tests the entire user journey from session creation to order completion

import { describe, expect, TestClient } from '../testFramework.js';
import app from '../../server-unified.js';
import { kv } from '@vercel/kv';

// Test configuration
const TEST_DOMAIN = 'sqqpyb-yq.myshopify.com';
const TEST_CART_TOKEN = `test-cart-e2e-${Date.now()}`;

// Create test client
const client = new TestClient(app);

// Mock external services
const mockStripe = {
  paymentIntents: {
    create: async (params) => ({
      id: `pi_test_e2e_${Date.now()}`,
      client_secret: `pi_test_secret_${Date.now()}`,
      amount: params.amount,
      currency: params.currency,
      status: 'requires_payment_method',
      metadata: params.metadata
    })
  }
};

// Override Stripe in the app
app.locals.stripe = mockStripe;

export const checkoutFlowTests = describe('E2E: Complete Checkout Flow', function () {
  let sessionToken;
  let csrfToken;
  let paymentIntentId;

  this.before(async () => {
    // Clear any existing test data
    const keys = await kv.keys('session:*test*');
    if (keys.length > 0) {
      await kv.del(...keys);
    }
  });

  this.describe('Step 1: Session Creation', function () {
    this.it('should create a new checkout session', async () => {
      const response = await client.post('/api/checkout/session', {
        headers: {
          'origin': `https://${TEST_DOMAIN}`,
          'referer': `https://${TEST_DOMAIN}/checkout`
        },
        body: {
          cartToken: TEST_CART_TOKEN,
          cartTotal: 10000 // $100.00
        }
      });

      expect.toBe(response.status, 200);
      expect.toHaveProperty(response.body, 'success', true);
      expect.toHaveProperty(response.body, 'sessionToken');
      expect.toHaveProperty(response.body, 'csrfToken');
      expect.toHaveProperty(response.body, 'expiresIn', 1800);

      // Store for subsequent tests
      sessionToken = response.body.sessionToken;
      csrfToken = response.body.csrfToken;

      // Verify session was created in Redis
      const session = await kv.get(`session:${sessionToken}`);
      expect.toBeTruthy(session);
      expect.toBe(session.cartToken, TEST_CART_TOKEN);
      expect.toBe(session.domain, TEST_DOMAIN);
    });

    this.it('should retrieve CSRF token for existing session', async () => {
      const response = await client.get('/api/checkout/csrf', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`
        }
      });

      expect.toBe(response.status, 200);
      expect.toHaveProperty(response.body, 'csrfToken');
      expect.toBe(response.body.csrfToken, csrfToken);
    });
  });

  this.describe('Step 2: Shipping Calculation', function () {
    this.it('should calculate shipping rates', async () => {
      const response = await client.post('/api/calculate-shipping', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`,
          'x-csrf-token': csrfToken
        },
        body: {
          items: [
            { name: 'Test Product', weight: 1000, quantity: 2 }
          ],
          postalCode: '10001',
          country: 'US',
          subtotal: 10000
        }
      });

      expect.toBe(response.status, 200);
      expect.toHaveProperty(response.body, 'rates');
      expect.toBeTruthy(Array.isArray(response.body.rates));
      expect.toBeGreaterThan(response.body.rates.length, 0);

      const standardRate = response.body.rates.find(r => r.id === 'standard');
      expect.toBeTruthy(standardRate);
      expect.toHaveProperty(standardRate, 'label');
      expect.toHaveProperty(standardRate, 'amount');
      expect.toBeGreaterThan(standardRate.amount, 0);
    });
  });

  this.describe('Step 3: Tax Calculation', function () {
    this.it('should calculate tax based on state', async () => {
      const response = await client.post('/api/calculate-tax', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`,
          'x-csrf-token': csrfToken
        },
        body: {
          subtotal: 10000, // $100.00
          shipping: 1000,  // $10.00
          state: 'CA'
        }
      });

      expect.toBe(response.status, 200);
      expect.toHaveProperty(response.body, 'taxRate');
      expect.toHaveProperty(response.body, 'taxAmount');
      expect.toHaveProperty(response.body, 'total');

      // California tax rate is 7.25%
      expect.toBe(response.body.taxRate, 0.0725);
      expect.toBe(response.body.taxAmount, 798); // $7.98 (7.25% of $110)
      expect.toBe(response.body.total, 11798); // $117.98
    });
  });

  this.describe('Step 4: Payment Intent Creation', function () {
    this.it('should create payment intent with all metadata', async () => {
      const response = await client.post('/api/stripe/create-payment-intent', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`,
          'x-csrf-token': csrfToken
        },
        body: {
          amount: 11798, // Total from tax calculation
          currency: 'usd',
          metadata: {
            customer_email: 'test@example.com',
            customer_first_name: 'John',
            customer_last_name: 'Doe',
            items: JSON.stringify([
              { name: 'Test Product', quantity: 2, price: 5000 }
            ]),
            shipping_address: JSON.stringify({
              address1: '123 Test St',
              city: 'New York',
              state: 'NY',
              zip: '10001',
              country: 'US'
            }),
            rep: 'test-rep'
          }
        }
      });

      expect.toBe(response.status, 200);
      expect.toHaveProperty(response.body, 'clientSecret');
      expect.toHaveProperty(response.body, 'paymentIntentId');

      // Verify payment intent ID format
      expect.toContain(response.body.paymentIntentId, 'pi_test_e2e_');

      // Store for verification
      paymentIntentId = response.body.paymentIntentId;

      // Verify session was updated with payment intent
      const session = await kv.get(`session:${sessionToken}`);
      expect.toContain(session.paymentIntents, paymentIntentId);
    });
  });

  this.describe('Step 5: Order Creation', function () {
    this.it('should create Shopify order with validated data', async () => {
      const response = await client.post('/api/shopify/create-order', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`,
          'x-csrf-token': csrfToken
        },
        body: {
          email: 'test@example.com',
          shipping_address: {
            first_name: 'John',
            last_name: 'Doe',
            address1: '123 Test St',
            city: 'New York',
            province: 'NY',
            zip: '10001',
            country: 'US'
          },
          items: [
            {
              variant_id: '12345',
              quantity: 2,
              price: 5000
            }
          ],
          total_price: 11798,
          payment_intent_id: paymentIntentId
        }
      });

      expect.toBe(response.status, 200);
      expect.toHaveProperty(response.body, 'success', true);
      expect.toHaveProperty(response.body, 'order');
      expect.toHaveProperty(response.body.order, 'id');
      expect.toHaveProperty(response.body.order, 'name');
    });
  });

  this.describe('Step 6: Session Cleanup', function () {
    this.it('should logout and clear session', async () => {
      const response = await client.post('/api/checkout/logout', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`,
          'x-csrf-token': csrfToken
        }
      });

      expect.toBe(response.status, 200);
      expect.toHaveProperty(response.body, 'success', true);

      // Verify session was deleted
      const session = await kv.get(`session:${sessionToken}`);
      expect.toBeFalsy(session);
    });

    this.it('should reject requests with deleted session', async () => {
      const response = await client.get('/api/checkout/csrf', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`
        }
      });

      expect.toBe(response.status, 401);
      expect.toHaveProperty(response.body, 'error');
    });
  });
});

// Error scenario tests
export const errorScenarioTests = describe('E2E: Error Scenarios', function () {
  let sessionToken;
  let csrfToken;

  this.before(async () => {
    // Create a valid session for error testing
    const response = await client.post('/api/checkout/session', {
      headers: {
        'origin': `https://${TEST_DOMAIN}`
      },
      body: {
        cartToken: `error-test-cart-${Date.now()}`,
        cartTotal: 5000
      }
    });

    sessionToken = response.body.sessionToken;
    csrfToken = response.body.csrfToken;
  });

  this.describe('Authentication Errors', function () {
    this.it('should reject requests without session token', async () => {
      const response = await client.post('/api/calculate-shipping', {
        body: { items: [], postalCode: '10001' }
      });

      expect.toBe(response.status, 401);
      expect.toHaveProperty(response.body, 'error', 'No session token provided');
    });

    this.it('should reject requests with invalid session token', async () => {
      const response = await client.post('/api/calculate-shipping', {
        headers: {
          'Authorization': 'Bearer invalid-token-12345'
        },
        body: { items: [], postalCode: '10001' }
      });

      expect.toBe(response.status, 401);
      expect.toContain(response.body.error, 'session');
    });

    this.it('should reject requests without CSRF token', async () => {
      const response = await client.post('/api/calculate-shipping', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`
        },
        body: { items: [], postalCode: '10001' }
      });

      expect.toBe(response.status, 403);
      expect.toHaveProperty(response.body, 'error', 'Invalid CSRF token');
    });

    this.it('should reject requests with wrong CSRF token', async () => {
      const response = await client.post('/api/calculate-shipping', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`,
          'x-csrf-token': 'wrong-csrf-token'
        },
        body: { items: [], postalCode: '10001' }
      });

      expect.toBe(response.status, 403);
      expect.toHaveProperty(response.body, 'error', 'Invalid CSRF token');
    });
  });

  this.describe('Validation Errors', function () {
    this.it('should validate shipping input', async () => {
      const response = await client.post('/api/calculate-shipping', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`,
          'x-csrf-token': csrfToken
        },
        body: {
          items: [], // Empty items
          postalCode: '12345'
        }
      });

      expect.toBe(response.status, 400);
      expect.toContain(response.body.error, 'items');
    });

    this.it('should validate postal code format', async () => {
      const response = await client.post('/api/calculate-shipping', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`,
          'x-csrf-token': csrfToken
        },
        body: {
          items: [{ name: 'Test', weight: 100, quantity: 1 }],
          postalCode: 'invalid-zip',
          country: 'US'
        }
      });

      expect.toBe(response.status, 400);
      expect.toContain(response.body.error, 'postal code');
    });

    this.it('should validate payment amount', async () => {
      const response = await client.post('/api/stripe/create-payment-intent', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`,
          'x-csrf-token': csrfToken
        },
        body: {
          amount: -100, // Negative amount
          currency: 'usd'
        }
      });

      expect.toBe(response.status, 400);
      expect.toHaveProperty(response.body, 'error', 'Invalid amount');
    });

    this.it('should enforce maximum payment amount', async () => {
      const response = await client.post('/api/stripe/create-payment-intent', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`,
          'x-csrf-token': csrfToken
        },
        body: {
          amount: 10000000, // Over $9,999.99 limit
          currency: 'usd'
        }
      });

      expect.toBe(response.status, 400);
      expect.toHaveProperty(response.body, 'error', 'Invalid amount');
    });
  });

  this.describe('Domain Security', function () {
    this.it('should reject sessions from unauthorized domains', async () => {
      const response = await client.post('/api/checkout/session', {
        headers: {
          'origin': 'https://malicious-site.com'
        },
        body: {
          cartToken: 'malicious-cart',
          cartTotal: 1000
        }
      });

      expect.toBe(response.status, 403);
      expect.toHaveProperty(response.body, 'error', 'Unauthorized domain');
    });
  });
});
