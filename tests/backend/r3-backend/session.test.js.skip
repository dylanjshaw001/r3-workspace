// Tests for session management
import { describe, expect, Mock } from './testFramework.js';
import {
  createSecureSession,
  getSecureSession,
  generateCSRFToken,
  validateCSRFToken,
  getDomainFromRequest
} from '../utils/session.js';

// Mock Redis
const mockKV = {
  set: new Mock('kv.set'),
  get: new Mock('kv.get'),
  del: new Mock('kv.del')
};

// Override kv import
global.kv = {
  set: (...args) => mockKV.set.fn(...args),
  get: (...args) => mockKV.get.fn(...args),
  del: (...args) => mockKV.del.fn(...args)
};

export const sessionTests = describe('Session Management', function () {
  this.beforeEachTest(() => {
    mockKV.set.reset();
    mockKV.get.reset();
    mockKV.del.reset();
  });

  this.describe('createSecureSession', function () {
    this.it('should create a new session', async () => {
      mockKV.set.returns(true);

      const result = await createSecureSession({
        cartToken: 'test-cart-123',
        domain: 'test.myshopify.com',
        userAgent: 'Test Browser',
        ipAddress: '127.0.0.1',
        csrfToken: 'test-csrf'
      });

      expect.toHaveProperty(result, 'sessionId');
      expect.toHaveProperty(result, 'cookieOptions');
      expect.toBeTruthy(mockKV.set.wasCalled());

      // Check session data
      const [key, data, options] = mockKV.set.lastCall();
      expect.toContain(key, 'session:');
      expect.toEqual(data.cartToken, 'test-cart-123');
      expect.toEqual(data.domain, 'test.myshopify.com');
      expect.toEqual(data.csrfToken, 'test-csrf');
      expect.toBeTruthy(data.expiresAt > Date.now());
    });

    this.it('should set appropriate cookie options', async () => {
      mockKV.set.returns(true);

      const result = await createSecureSession({
        cartToken: 'test-cart-123',
        domain: 'test.myshopify.com'
      });

      const { cookieOptions } = result;
      expect.toBe(cookieOptions.httpOnly, true);
      expect.toBe(cookieOptions.secure, true);
      expect.toBe(cookieOptions.sameSite, 'none');
      expect.toBe(cookieOptions.maxAge, 1800000); // 30 minutes
    });
  });

  this.describe('getSecureSession', function () {
    this.it('should retrieve valid session', async () => {
      const sessionData = {
        cartToken: 'test-cart-123',
        domain: 'test.myshopify.com',
        csrfToken: 'test-csrf',
        expiresAt: Date.now() + 60000,
        fingerprint: 'test-fingerprint',
        paymentIntents: []
      };

      mockKV.get.returns(sessionData);

      const req = {
        headers: { 'user-agent': 'Test Browser' },
        ip: '127.0.0.1'
      };

      const result = await getSecureSession('test-session-id', req);

      expect.toBe(result.valid, true);
      expect.toEqual(result.data, sessionData);
      expect.toBeTruthy(mockKV.get.wasCalled());
    });

    this.it('should reject expired sessions', async () => {
      const sessionData = {
        cartToken: 'test-cart-123',
        domain: 'test.myshopify.com',
        expiresAt: Date.now() - 1000 // Expired
      };

      mockKV.get.returns(sessionData);
      mockKV.del.returns(true);

      const req = {
        headers: { 'user-agent': 'Test Browser' },
        ip: '127.0.0.1'
      };

      const result = await getSecureSession('test-session-id', req);

      expect.toBe(result.valid, false);
      expect.toBe(result.error, 'Session expired');
      expect.toBeTruthy(mockKV.del.wasCalled());
    });

    this.it('should handle missing sessions', async () => {
      mockKV.get.returns(null);

      const req = {
        headers: { 'user-agent': 'Test Browser' },
        ip: '127.0.0.1'
      };

      const result = await getSecureSession('test-session-id', req);

      expect.toBe(result.valid, false);
      expect.toBe(result.error, 'Session not found');
    });
  });

  this.describe('CSRF Token', function () {
    this.it('should generate CSRF tokens', () => {
      const token = generateCSRFToken();

      expect.toBeTruthy(token);
      expect.toBe(typeof token, 'string');
      expect.toBeGreaterThan(token.length, 20);
    });

    this.it('should validate matching CSRF tokens', () => {
      const token = 'test-csrf-token';
      const session = { csrfToken: token };

      const result = validateCSRFToken(token, session);
      expect.toBe(result, true);
    });

    this.it('should reject mismatched CSRF tokens', () => {
      const session = { csrfToken: 'correct-token' };

      const result = validateCSRFToken('wrong-token', session);
      expect.toBe(result, false);
    });

    this.it('should reject missing CSRF tokens', () => {
      const session = { csrfToken: 'test-token' };

      expect.toBe(validateCSRFToken(null, session), false);
      expect.toBe(validateCSRFToken(undefined, session), false);
      expect.toBe(validateCSRFToken('', session), false);
    });
  });

  this.describe('getDomainFromRequest', function () {
    this.it('should extract domain from origin header', () => {
      const req = {
        headers: { origin: 'https://test.myshopify.com' }
      };

      const domain = getDomainFromRequest(req);
      expect.toBe(domain, 'test.myshopify.com');
    });

    this.it('should extract domain from referer header', () => {
      const req = {
        headers: { referer: 'https://test.myshopify.com/checkout' }
      };

      const domain = getDomainFromRequest(req);
      expect.toBe(domain, 'test.myshopify.com');
    });

    this.it('should use provided domain parameter', () => {
      const req = { headers: {} };

      const domain = getDomainFromRequest(req, 'provided.myshopify.com');
      expect.toBe(domain, 'provided.myshopify.com');
    });

    this.it('should return null for invalid domains', () => {
      const req = { headers: {} };

      const domain = getDomainFromRequest(req);
      expect.toBe(domain, null);
    });
  });
});
