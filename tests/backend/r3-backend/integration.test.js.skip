// Integration tests for the complete payment flow
import { describe, expect, TestClient } from './testFramework.js';
import app from '../server-session-integrated.js';

// Create test client
const client = new TestClient(app);

// Mock Stripe
const mockStripe = {
  paymentIntents: {
    create: async (params) => ({
      id: 'pi_test_123',
      client_secret: 'pi_test_123_secret',
      amount: params.amount,
      currency: params.currency,
      status: 'requires_payment_method',
      metadata: params.metadata
    })
  }
};

// Override Stripe in the app
app.locals.stripe = mockStripe;

export const integrationTests = describe('Payment Flow Integration', function () {
  let sessionToken;
  let csrfToken;

  this.describe('Session Creation', function () {
    this.it('should create a new checkout session', async () => {
      const response = await client.post('/api/checkout/session', {
        body: {
          cartToken: 'test-cart-123',
          domain: 'test.myshopify.com',
          cartTotal: 10000
        }
      });

      expect.toBe(response.status, 200);
      expect.toHaveProperty(response.body, 'success', true);
      expect.toHaveProperty(response.body, 'sessionToken');
      expect.toHaveProperty(response.body, 'csrfToken');
      expect.toHaveProperty(response.body, 'expiresIn', 1800);

      // Store for subsequent tests
      sessionToken = response.body.sessionToken;
      csrfToken = response.body.csrfToken;
    });

    this.it('should reject invalid domains', async () => {
      const response = await client.post('/api/checkout/session', {
        body: {
          cartToken: 'test-cart-123',
          domain: 'malicious-site.com'
        }
      });

      expect.toBe(response.status, 400);
      expect.toHaveProperty(response.body, 'error', 'Invalid domain');
    });

    this.it('should reject missing cart token', async () => {
      const response = await client.post('/api/checkout/session', {
        body: {
          domain: 'test.myshopify.com'
        }
      });

      expect.toBe(response.status, 400);
      expect.toHaveProperty(response.body, 'error', 'Missing cart token');
    });
  });

  this.describe('Payment Intent Creation', function () {
    this.it('should create payment intent with valid session', async () => {
      const response = await client.post('/api/stripe/create-payment-intent', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`,
          'x-csrf-token': csrfToken
        },
        body: {
          amount: 10000,
          currency: 'usd',
          metadata: {
            customer_email: 'test@example.com',
            items: JSON.stringify([{ name: 'Test Product', price: 100 }])
          }
        }
      });

      expect.toBe(response.status, 200);
      expect.toHaveProperty(response.body, 'clientSecret');
      expect.toHaveProperty(response.body, 'paymentIntentId');
    });

    this.it('should reject requests without session', async () => {
      const response = await client.post('/api/stripe/create-payment-intent', {
        body: {
          amount: 10000,
          currency: 'usd'
        }
      });

      expect.toBe(response.status, 401);
      expect.toHaveProperty(response.body, 'error', 'No session token provided');
    });

    this.it('should reject requests without CSRF token', async () => {
      const response = await client.post('/api/stripe/create-payment-intent', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`
        },
        body: {
          amount: 10000,
          currency: 'usd'
        }
      });

      expect.toBe(response.status, 401);
      expect.toHaveProperty(response.body, 'error', 'Invalid CSRF token');
    });

    this.it('should validate amount limits', async () => {
      const response = await client.post('/api/stripe/create-payment-intent', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`,
          'x-csrf-token': csrfToken
        },
        body: {
          amount: 10000000, // Too high
          currency: 'usd'
        }
      });

      expect.toBe(response.status, 400);
      expect.toHaveProperty(response.body, 'error', 'Invalid amount');
    });
  });

  this.describe('Shipping Calculation', function () {
    this.it('should calculate shipping rates', async () => {
      const response = await client.post('/api/calculate-shipping', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`
        },
        body: {
          postalCode: '10001',
          country: 'US',
          items: [{ weight: 1000, quantity: 2 }]
        }
      });

      expect.toBe(response.status, 200);
      expect.toBeTruthy(Array.isArray(response.body));
      expect.toBeGreaterThan(response.body.length, 0);

      const rate = response.body[0];
      expect.toHaveProperty(rate, 'id');
      expect.toHaveProperty(rate, 'label');
      expect.toHaveProperty(rate, 'amount');
    });
  });

  this.describe('Tax Calculation', function () {
    this.it('should calculate tax', async () => {
      const response = await client.post('/api/calculate-tax', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`
        },
        body: {
          subtotal: 10000,
          shipping: 1000,
          state: 'CA'
        }
      });

      expect.toBe(response.status, 200);
      expect.toHaveProperty(response.body, 'taxRate');
      expect.toHaveProperty(response.body, 'taxAmount');
      expect.toHaveProperty(response.body, 'total');
    });
  });

  this.describe('Health Checks', function () {
    this.it('should return health status', async () => {
      const response = await client.get('/health');

      expect.toBe(response.status, 200);
      expect.toHaveProperty(response.body, 'status', 'healthy');
      expect.toHaveProperty(response.body, 'circuitBreakers');
      expect.toHaveProperty(response.body, 'timestamp');
    });

    this.it('should return circuit breaker states', async () => {
      const response = await client.get('/api/circuit-breakers', {
        headers: {
          'Authorization': `Bearer ${sessionToken}`
        }
      });

      expect.toBe(response.status, 200);
      expect.toHaveProperty(response.body, 'states');
      expect.toHaveProperty(response.body.states, 'stripe');
      expect.toHaveProperty(response.body.states, 'shopify');
      expect.toHaveProperty(response.body.states, 'redis');
    });
  });
});
